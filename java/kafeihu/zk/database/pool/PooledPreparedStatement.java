package kafeihu.zk.database.pool;

import kafeihu.zk.database.DBConstants;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.*;
import java.util.Calendar;

/**
 * Created by zhangkuo on 2016/11/22.
 */
public class PooledPreparedStatement implements PreparedStatement
{
    private PreparedStatement preparedStmt;
    private PooledDBConnection dbConn;
    // Sql语句
    private String sqlStmt;
    // 日志处理器
    private String logTips = getClass().getName();

    public PooledPreparedStatement(String sql, PreparedStatement preparedStmt,
                                   PooledDBConnection dbConn)
    {
        super();
        this.sqlStmt = sql;
        this.preparedStmt = preparedStmt;
        this.dbConn = dbConn;

    }

    private void handleException(SQLException exp)
    {
        handleException(sqlStmt, exp);
    }

    private void handleException(String sql, SQLException exp)
    {
        StringBuilder sb = new StringBuilder();
        sb.append("sqlException: ").append(exp);
        if (null != sql)
        {
            sb.append(" sql: ").append(sql);
        }
        // 写文件日志
        dbConn.getLogger().error(logTips, sb.toString());
        // 统计ＳＱＬ异常数据
//        SQLExceptionMonitor.logException(dbConn.getConnectionPoolID(), exp);
        // 检查数据库连接有效性
        dbConn.checkValid();
    }

    // Override method of java.sql.PreparedStatement
    @Override
    public void addBatch(String sql) throws SQLException
    {
        preparedStmt.addBatch(sql);
    }

    @Override
    public void cancel() throws SQLException
    {
        preparedStmt.cancel();
    }

    @Override
    public void clearBatch() throws SQLException
    {
        preparedStmt.clearBatch();
    }

    @Override
    public void clearWarnings() throws SQLException
    {
        preparedStmt.clearWarnings();
    }

    @Override
    public void close() throws SQLException
    {
        preparedStmt.close();
    }

    @Override
    public boolean execute(String sql) throws SQLException
    {
        long startMills = System.currentTimeMillis();
        try
        {
            return preparedStmt.execute(sql);
        }
        catch (SQLException ex)
        {
            handleException(ex);
            throw ex;
        }
        finally
        {
            long timeCostingMills = System.currentTimeMillis() - startMills;
//            SqlPerfMonitor.logPerfData(sql, timeCostingMills);
        }
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys)
            throws SQLException
    {
        long startMills = System.currentTimeMillis();
        try
        {
            return preparedStmt.execute(sql, autoGeneratedKeys);
        }
        catch (SQLException ex)
        {
            handleException(ex);
            throw ex;
        }
        finally
        {
            long timeCostingMills = System.currentTimeMillis() - startMills;
//            SqlPerfMonitor.logPerfData(sql, timeCostingMills);
        }
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException
    {
        long startMills = System.currentTimeMillis();
        try
        {
            return preparedStmt.execute(sql, columnIndexes);
        }
        catch (SQLException ex)
        {
            handleException(ex);
            throw ex;
        }
        finally
        {
            long timeCostingMills = System.currentTimeMillis() - startMills;
//            SqlPerfMonitor.logPerfData(sql, timeCostingMills);
        }
    }

    @Override
    public boolean execute(String sql, String[] columnNames)
            throws SQLException
    {
        long startMills = System.currentTimeMillis();
        try
        {
            return preparedStmt.execute(sql, columnNames);
        }
        catch (SQLException ex)
        {
            handleException(ex);
            throw ex;
        }
        finally
        {
            long timeCostingMills = System.currentTimeMillis() - startMills;
//            SqlPerfMonitor.logPerfData(sql, timeCostingMills);
        }
    }

    @Override
    public int[] executeBatch() throws SQLException
    {
        return preparedStmt.executeBatch();
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException
    {
        long startMills = System.currentTimeMillis();
        try
        {
            return preparedStmt.executeQuery(sql);
        }
        catch (SQLException ex)
        {
            handleException(ex);
            throw ex;
        }
        finally
        {
            long timeCostingMills = System.currentTimeMillis() - startMills;
//            SqlPerfMonitor.logPerfData(sql, timeCostingMills);
        }
    }

    @Override
    public int executeUpdate(String sql) throws SQLException
    {
        long startMills = System.currentTimeMillis();
        try
        {
            return preparedStmt.executeUpdate(sql);
        }
        catch (SQLException ex)
        {
            handleException(ex);
            throw ex;
        }
        finally
        {
            long timeCostingMills = System.currentTimeMillis() - startMills;
//            SqlPerfMonitor.logPerfData(sql, timeCostingMills);
        }
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys)
            throws SQLException
    {
        long startMills = System.currentTimeMillis();
        try
        {
            return preparedStmt.executeUpdate(sql, autoGeneratedKeys);
        }
        catch (SQLException ex)
        {
            handleException(ex);
            throw ex;
        }
        finally
        {
            long timeCostingMills = System.currentTimeMillis() - startMills;
//            SqlPerfMonitor.logPerfData(sql, timeCostingMills);
        }
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes)
            throws SQLException
    {
        long startMills = System.currentTimeMillis();
        try
        {
            return preparedStmt.executeUpdate(sql, columnIndexes);
        }
        catch (SQLException ex)
        {
            handleException(ex);
            throw ex;
        }
        finally
        {
            long timeCostingMills = System.currentTimeMillis() - startMills;
//            SqlPerfMonitor.logPerfData(sql, timeCostingMills);
        }
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames)
            throws SQLException
    {
        long startMills = System.currentTimeMillis();
        try
        {
            return preparedStmt.executeUpdate(sql, columnNames);
        }
        catch (SQLException ex)
        {
            handleException(ex);
            throw ex;
        }
        finally
        {
            long timeCostingMills = System.currentTimeMillis() - startMills;
//            SqlPerfMonitor.logPerfData(sql, timeCostingMills);
        }
    }

    @Override
    public Connection getConnection() throws SQLException
    {
        return preparedStmt.getConnection();
    }

    @Override
    public int getFetchDirection() throws SQLException
    {
        return preparedStmt.getFetchDirection();
    }

    @Override
    public int getFetchSize() throws SQLException
    {
        return preparedStmt.getFetchSize();
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException
    {
        return preparedStmt.getGeneratedKeys();
    }

    @Override
    public int getMaxFieldSize() throws SQLException
    {
        return preparedStmt.getMaxFieldSize();
    }

    @Override
    public int getMaxRows() throws SQLException
    {
        return preparedStmt.getMaxRows();
    }

    @Override
    public boolean getMoreResults() throws SQLException
    {
        return preparedStmt.getMoreResults();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException
    {
        return preparedStmt.getMoreResults(current);
    }

    @Override
    public int getQueryTimeout() throws SQLException
    {
        return preparedStmt.getQueryTimeout();
    }

    @Override
    public ResultSet getResultSet() throws SQLException
    {
        return preparedStmt.getResultSet();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException
    {
        return preparedStmt.getResultSetConcurrency();
    }

    @Override
    public int getResultSetHoldability() throws SQLException
    {
        return preparedStmt.getResultSetHoldability();
    }

    @Override
    public int getResultSetType() throws SQLException
    {
        return preparedStmt.getResultSetType();
    }

    @Override
    public int getUpdateCount() throws SQLException
    {
        return preparedStmt.getUpdateCount();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException
    {
        return preparedStmt.getWarnings();
    }

    @Override
    public boolean isClosed() throws SQLException
    {
        return preparedStmt.isClosed();
    }

    @Override
    public boolean isPoolable() throws SQLException
    {
        return preparedStmt.isPoolable();
    }

    //新增
    @Override
    public void closeOnCompletion() throws SQLException {

    }
    //新增
    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return false;
    }

    @Override
    public void setCursorName(String name) throws SQLException
    {
        preparedStmt.setCursorName(name);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException
    {
        preparedStmt.setEscapeProcessing(enable);
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException
    {
        preparedStmt.setFetchDirection(direction);
    }

    @Override
    public void setFetchSize(int rows) throws SQLException
    {
        preparedStmt.setFetchSize(rows);
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException
    {
        preparedStmt.setMaxFieldSize(max);
    }

    @Override
    public void setMaxRows(int max) throws SQLException
    {
        preparedStmt.setMaxRows(max);
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException
    {
        preparedStmt.setPoolable(poolable);
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException
    {
        preparedStmt.setQueryTimeout(seconds);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException
    {
        return preparedStmt.isWrapperFor(iface);
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException
    {
        return preparedStmt.unwrap(iface);
    }

    @Override
    public void addBatch() throws SQLException
    {
        preparedStmt.addBatch();
    }

    @Override
    public void clearParameters() throws SQLException
    {
        preparedStmt.clearParameters();
    }

    @Override
    public boolean execute() throws SQLException
    {
        long startMills = System.currentTimeMillis();
        try
        {
            return preparedStmt.execute();
        }
        catch (SQLException ex)
        {
            handleException(ex);
            throw ex;
        }
        finally
        {
            long timeCostingMills = System.currentTimeMillis() - startMills;
//            SqlPerfMonitor.logPerfData(sqlStmt, timeCostingMills);
        }
    }

    @Override
    public ResultSet executeQuery() throws SQLException
    {
        long startMills = System.currentTimeMillis();
        try
        {
            return preparedStmt.executeQuery();
        }
        catch (SQLException ex)
        {
            handleException(ex);
            throw ex;
        }
        finally
        {
            long timeCostingMills = System.currentTimeMillis() - startMills;
//            SqlPerfMonitor.logPerfData(sqlStmt, timeCostingMills);
        }
    }

    @Override
    public int executeUpdate() throws SQLException
    {
        long startMills = System.currentTimeMillis();
        try
        {
            return preparedStmt.executeUpdate();
        }
        catch (SQLException ex)
        {
            handleException(ex);
            throw ex;
        }
        finally
        {
            long timeCostingMills = System.currentTimeMillis() - startMills;
//            SqlPerfMonitor.logPerfData(sqlStmt, timeCostingMills);
        }
    }

    @Override
    public ResultSetMetaData getMetaData() throws SQLException
    {
        return preparedStmt.getMetaData();
    }

    @Override
    public ParameterMetaData getParameterMetaData() throws SQLException
    {
        return preparedStmt.getParameterMetaData();
    }

    @Override
    public void setArray(int parameterIndex, Array x) throws SQLException
    {
        preparedStmt.setArray(parameterIndex, x);
    }

    @Override
    public void setAsciiStream(int parameterIndex, InputStream x)
            throws SQLException
    {
        preparedStmt.setAsciiStream(parameterIndex, x);
    }

    @Override
    public void setAsciiStream(int parameterIndex, InputStream x, int length)
            throws SQLException
    {
        preparedStmt.setAsciiStream(parameterIndex, x, length);

    }

    @Override
    public void setAsciiStream(int parameterIndex, InputStream x, long length)
            throws SQLException
    {
        preparedStmt.setAsciiStream(parameterIndex, x, length);
    }

    @Override
    public void setBigDecimal(int parameterIndex, BigDecimal x)
            throws SQLException
    {
        preparedStmt.setBigDecimal(parameterIndex, x);
    }

    @Override
    public void setBinaryStream(int parameterIndex, InputStream x)
            throws SQLException
    {
        preparedStmt.setBinaryStream(parameterIndex, x);
    }

    @Override
    public void setBinaryStream(int parameterIndex, InputStream x, int length)
            throws SQLException
    {
        preparedStmt.setBinaryStream(parameterIndex, x, length);
    }

    @Override
    public void setBinaryStream(int parameterIndex, InputStream x, long length)
            throws SQLException
    {
        preparedStmt.setBinaryStream(parameterIndex, x, length);

    }

    @Override
    public void setBlob(int parameterIndex, Blob x) throws SQLException
    {
        preparedStmt.setBlob(parameterIndex, x);
    }

    @Override
    public void setBlob(int parameterIndex, InputStream inputStream)
            throws SQLException
    {
        preparedStmt.setBlob(parameterIndex, inputStream);
    }

    @Override
    public void setBlob(int parameterIndex, InputStream inputStream, long length)
            throws SQLException
    {
        preparedStmt.setBlob(parameterIndex, inputStream, length);
    }

    @Override
    public void setBoolean(int parameterIndex, boolean x) throws SQLException
    {
        preparedStmt.setBoolean(parameterIndex, x);

    }

    @Override
    public void setByte(int parameterIndex, byte x) throws SQLException
    {
        preparedStmt.setByte(parameterIndex, x);

    }

    @Override
    public void setBytes(int parameterIndex, byte[] x) throws SQLException
    {
        preparedStmt.setBytes(parameterIndex, x);
    }

    @Override
    public void setCharacterStream(int parameterIndex, Reader reader)
            throws SQLException
    {
        preparedStmt.setCharacterStream(parameterIndex, reader);
    }

    @Override
    public void setCharacterStream(int parameterIndex, Reader reader, int length)
            throws SQLException
    {
        preparedStmt.setCharacterStream(parameterIndex, reader, length);

    }

    @Override
    public void setCharacterStream(int parameterIndex, Reader reader,
                                   long length) throws SQLException
    {
        preparedStmt.setCharacterStream(parameterIndex, reader, length);
    }

    @Override
    public void setClob(int parameterIndex, Clob x) throws SQLException
    {
        preparedStmt.setClob(parameterIndex, x);
    }

    @Override
    public void setClob(int parameterIndex, Reader reader) throws SQLException
    {
        preparedStmt.setClob(parameterIndex, reader);
    }

    @Override
    public void setClob(int parameterIndex, Reader reader, long length)
            throws SQLException
    {
        preparedStmt.setClob(parameterIndex, reader, length);
    }

    @Override
    public void setDate(int parameterIndex, Date x) throws SQLException
    {
        preparedStmt.setDate(parameterIndex, x);
    }

    @Override
    public void setDate(int parameterIndex, Date x, Calendar cal)
            throws SQLException
    {
        preparedStmt.setDate(parameterIndex, x, cal);
    }

    @Override
    public void setDouble(int parameterIndex, double x) throws SQLException
    {
        preparedStmt.setDouble(parameterIndex, x);

    }

    @Override
    public void setFloat(int parameterIndex, float x) throws SQLException
    {
        preparedStmt.setFloat(parameterIndex, x);
    }

    @Override
    public void setInt(int parameterIndex, int x) throws SQLException
    {
        preparedStmt.setInt(parameterIndex, x);
    }

    @Override
    public void setLong(int parameterIndex, long x) throws SQLException
    {
        preparedStmt.setLong(parameterIndex, x);
    }

    @Override
    public void setNCharacterStream(int parameterIndex, Reader value)
            throws SQLException
    {
        preparedStmt.setNCharacterStream(parameterIndex, value);
    }

    @Override
    public void setNCharacterStream(int parameterIndex, Reader value,
                                    long length) throws SQLException
    {
        preparedStmt.setNCharacterStream(parameterIndex, value, length);
    }

    @Override
    public void setNClob(int parameterIndex, NClob value) throws SQLException
    {
        preparedStmt.setNClob(parameterIndex, value);
    }

    @Override
    public void setNClob(int parameterIndex, Reader reader) throws SQLException
    {
        preparedStmt.setNClob(parameterIndex, reader);
    }

    @Override
    public void setNClob(int parameterIndex, Reader reader, long length)
            throws SQLException
    {
        preparedStmt.setNClob(parameterIndex, reader, length);
    }

    @Override
    public void setNString(int parameterIndex, String value)
            throws SQLException
    {
        preparedStmt.setNString(parameterIndex, value);
    }

    @Override
    public void setNull(int parameterIndex, int sqlType) throws SQLException
    {
        preparedStmt.setNull(parameterIndex, sqlType);
    }

    @Override
    public void setNull(int parameterIndex, int sqlType, String typeName)
            throws SQLException
    {
        preparedStmt.setNull(parameterIndex, sqlType, typeName);
    }

    @Override
    public void setObject(int parameterIndex, Object x) throws SQLException
    {
        preparedStmt.setObject(parameterIndex, x);
    }

    @Override
    public void setObject(int parameterIndex, Object x, int targetSqlType)
            throws SQLException
    {
        preparedStmt.setObject(parameterIndex, x, targetSqlType);
    }

    @Override
    public void setObject(int parameterIndex, Object x, int targetSqlType,
                          int scaleOrLength) throws SQLException
    {
        preparedStmt.setObject(parameterIndex, x, targetSqlType, scaleOrLength);
    }

    @Override
    public void setRef(int parameterIndex, Ref x) throws SQLException
    {
        preparedStmt.setRef(parameterIndex, x);

    }

    @Override
    public void setRowId(int parameterIndex, RowId x) throws SQLException
    {
        preparedStmt.setRowId(parameterIndex, x);
    }

    @Override
    public void setSQLXML(int parameterIndex, SQLXML xmlObject)
            throws SQLException
    {
        preparedStmt.setSQLXML(parameterIndex, xmlObject);
    }

    @Override
    public void setShort(int parameterIndex, short x) throws SQLException
    {
        preparedStmt.setShort(parameterIndex, x);
    }

    @Override
    public void setString(int parameterIndex, String x) throws SQLException
    {
        preparedStmt.setString(parameterIndex, x);
    }

    @Override
    public void setTime(int parameterIndex, Time x) throws SQLException
    {
        preparedStmt.setTime(parameterIndex, x);
    }

    @Override
    public void setTime(int parameterIndex, Time x, Calendar cal)
            throws SQLException
    {
        preparedStmt.setTime(parameterIndex, x, cal);

    }

    @Override
    public void setTimestamp(int parameterIndex, Timestamp x)
            throws SQLException
    {
        preparedStmt.setTimestamp(parameterIndex, x);
    }

    @Override
    public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal)
            throws SQLException
    {
        preparedStmt.setTimestamp(parameterIndex, x, cal);
    }

    @Override
    public void setURL(int parameterIndex, URL x) throws SQLException
    {
        preparedStmt.setURL(parameterIndex, x);

    }

    @Override
    public void setUnicodeStream(int parameterIndex, InputStream x, int length)
            throws SQLException
    {
        // preparedStmt.setUnicodeStream(parameterIndex, x, length);
        throw new SQLException(DBConstants.Msg_UnsupportedMethod);
    }

}